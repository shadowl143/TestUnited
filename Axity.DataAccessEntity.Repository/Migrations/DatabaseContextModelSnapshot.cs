// <auto-generated />
using System;
using Axity.DataAccessEntity.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Axity.DataAccessEntity.Entities.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Actions.ActionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actions", "act");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alta"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Baja"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cambios"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Actualizar"
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Actions.ActSubPageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("FkPage")
                        .HasColumnType("int");

                    b.Property<int?>("SubMenuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("FkPage");

                    b.HasIndex("SubMenuId");

                    b.ToTable("ActSubPages", "act");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionId = 1,
                            SubMenuId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActionId = 2,
                            SubMenuId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActionId = 3,
                            SubMenuId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActionId = 4,
                            SubMenuId = 1
                        },
                        new
                        {
                            Id = 5,
                            ActionId = 1,
                            SubMenuId = 2
                        },
                        new
                        {
                            Id = 6,
                            ActionId = 2,
                            SubMenuId = 2
                        },
                        new
                        {
                            Id = 7,
                            ActionId = 3,
                            SubMenuId = 2
                        },
                        new
                        {
                            Id = 8,
                            ActionId = 4,
                            SubMenuId = 2
                        },
                        new
                        {
                            Id = 9,
                            ActionId = 1,
                            SubMenuId = 3
                        },
                        new
                        {
                            Id = 10,
                            ActionId = 3,
                            SubMenuId = 3
                        },
                        new
                        {
                            Id = 11,
                            ActionId = 1,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 12,
                            ActionId = 2,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 13,
                            ActionId = 3,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 14,
                            ActionId = 4,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 15,
                            ActionId = 1,
                            FkPage = 1
                        },
                        new
                        {
                            Id = 16,
                            ActionId = 2,
                            FkPage = 1
                        },
                        new
                        {
                            Id = 17,
                            ActionId = 3,
                            FkPage = 1
                        },
                        new
                        {
                            Id = 18,
                            ActionId = 1,
                            FkPage = 2
                        },
                        new
                        {
                            Id = 19,
                            ActionId = 2,
                            FkPage = 2
                        },
                        new
                        {
                            Id = 20,
                            ActionId = 3,
                            FkPage = 2
                        },
                        new
                        {
                            Id = 21,
                            ActionId = 4,
                            FkPage = 2
                        },
                        new
                        {
                            Id = 22,
                            ActionId = 1,
                            FkPage = 3
                        },
                        new
                        {
                            Id = 23,
                            ActionId = 2,
                            FkPage = 3
                        },
                        new
                        {
                            Id = 24,
                            ActionId = 2,
                            FkPage = 4
                        },
                        new
                        {
                            Id = 25,
                            ActionId = 3,
                            FkPage = 4
                        },
                        new
                        {
                            Id = 26,
                            ActionId = 4,
                            FkPage = 4
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Menu.MenuModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "menu",
                            Icon = "menu",
                            Name = "menu",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Code = "menu 1",
                            Icon = "menu 1",
                            Name = "menu 1",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Code = "menu 2",
                            Icon = "menu 2",
                            Name = "menu 2",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            Code = "menu 3",
                            Icon = "menu 3",
                            Name = "menu 3",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Code = "menu 4",
                            Icon = "menu 4",
                            Name = "menu 4",
                            Status = true
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Menu.PageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SubMenuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubMenuId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "page",
                            Icon = "page",
                            Name = "page",
                            Status = true,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 2,
                            Code = "page 1",
                            Icon = "page 1",
                            Name = "page 1",
                            Status = true,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 3,
                            Code = "page 2",
                            Icon = "page 2",
                            Name = "page 2",
                            Status = true,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 4,
                            Code = "page 5",
                            Icon = "page 5",
                            Name = "page 5",
                            Status = true,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "page 6",
                            Icon = "page 6",
                            Name = "page 6",
                            Status = true,
                            SubMenuId = 4
                        },
                        new
                        {
                            Id = 6,
                            Code = "page 7",
                            Icon = "page 7",
                            Name = "page 7",
                            Status = true,
                            SubMenuId = 4
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Menu.SubMenuModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("subMenus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "submenu",
                            Icon = "submenu",
                            MenuId = 1,
                            Name = "submenu",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Code = "submenu 1",
                            Icon = "submenu 1",
                            MenuId = 1,
                            Name = "submenu 1",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Code = "submenu 4",
                            Icon = "submenu 4",
                            MenuId = 2,
                            Name = "submenu 4",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            Code = "submenu 5",
                            Icon = "submenu 5",
                            MenuId = 2,
                            Name = "submenu 5",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Code = "submenu 6",
                            Icon = "submenu 6",
                            MenuId = 3,
                            Name = "submenu 6",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            Code = "submenu 7",
                            Icon = "submenu 7",
                            MenuId = 3,
                            Name = "submenu 7",
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            Code = "submenu 8",
                            Icon = "submenu 8",
                            MenuId = 4,
                            Name = "submenu 8",
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            Code = "submenu 9",
                            Icon = "submenu 9",
                            MenuId = 5,
                            Name = "submenu 9",
                            Status = true
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Rols.RolModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Pk_Rol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Codigo");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Descripcion");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Nombre");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Estado");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "rol",
                            Description = "rol",
                            Name = "rol",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Code = "rol1",
                            Description = "rol1",
                            Name = "rol1",
                            Status = true
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.User.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b
                        .HasComment("Tabla usuarios")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastName = "Last",
                            Mail = "Mail",
                            Name = "Name",
                            Password = "Password",
                            Phone = "123456789",
                            RegisterDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecondLastName = "SecondLastName",
                            Status = true,
                            UserName = "Mail"
                        },
                        new
                        {
                            Id = 2,
                            LastName = "user1",
                            Mail = "user1",
                            Name = "user1",
                            Password = "user1",
                            Phone = "123456788",
                            RegisterDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecondLastName = "user1",
                            Status = true,
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.User.UserRolModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UserRols");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RolId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RolId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RolId = 1
                        });
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Actions.ActSubPageModel", b =>
                {
                    b.HasOne("Axity.DataAccessEntity.Entities.Model.Actions.ActionModel", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Axity.DataAccessEntity.Entities.Model.Menu.PageModel", "Page")
                        .WithMany()
                        .HasForeignKey("FkPage");

                    b.HasOne("Axity.DataAccessEntity.Entities.Model.Menu.SubMenuModel", "SubMenu")
                        .WithMany()
                        .HasForeignKey("SubMenuId");

                    b.Navigation("Action");

                    b.Navigation("Page");

                    b.Navigation("SubMenu");
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Menu.PageModel", b =>
                {
                    b.HasOne("Axity.DataAccessEntity.Entities.Model.Menu.SubMenuModel", "SubMenu")
                        .WithMany("Pages")
                        .HasForeignKey("SubMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubMenu");
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Menu.SubMenuModel", b =>
                {
                    b.HasOne("Axity.DataAccessEntity.Entities.Model.Menu.MenuModel", "Menu")
                        .WithMany("SubMenu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.User.UserRolModel", b =>
                {
                    b.HasOne("Axity.DataAccessEntity.Entities.Model.Rols.RolModel", "Rol")
                        .WithMany("UserRol")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Axity.DataAccessEntity.Entities.Model.User.UserModel", "User")
                        .WithMany("UserRol")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Menu.MenuModel", b =>
                {
                    b.Navigation("SubMenu");
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Menu.SubMenuModel", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.Rols.RolModel", b =>
                {
                    b.Navigation("UserRol");
                });

            modelBuilder.Entity("Axity.DataAccessEntity.Entities.Model.User.UserModel", b =>
                {
                    b.Navigation("UserRol");
                });
#pragma warning restore 612, 618
        }
    }
}
